/**
* Handler to be executed while executing a custom token exchange request
* @param {Event} event - Details about the incoming token exchange request.
* @param {CustomTokenExchangeAPI} api - Methods and utilities to define token exchange process.
*/
exports.onExecuteCustomTokenExchange = async (event, api) => {
  
  // The subject_token format is expected to be "userId:email@domain.com"
  const subjectToken = event.transaction.subject_token;
  
  // 1. Validate Token Format
  if (!subjectToken || !subjectToken.includes(':')) {
      api.access.deny('invalid_subject_token', 'Subject token format is incorrect (expected user_id:email).');
      return;
  }
 
  // 2. Split the token string at the colon (':')
  const tokenParts = subjectToken.split(':');

  // 3. Assign the parts to their respective variables
  // NOTE: This assumes the user ID passed by the Action is identical to the one generated by the create script.
  const userId = tokenParts[0]; 
  const email = tokenParts[1];

  // 4. Use the extracted values to set the user in the Custom Database Connection.
  api.authentication.setUserByConnection(
    'Customdb-Passkey', // Replace with your actual Custom Database Connection Name
    {
      user_id: userId,
      email: email
    },
    {
      creationBehavior: 'create_if_not_exists',
      updateBehavior: 'none'
    }
  );

  return;
};
